@font-face {
    font-family: "IranSans";
    src:
        url("fonts/IranSans.woff2") format("woff2"),
        url("fonts/IranSans.woff") format("woff");
}

@font-face {
    font-family: "Vazir.ttf";
    src: url("../assets/Vazir.ttf"),
        url("../assets/Vazir.otf");
}

body {
    background-color: rgb(24, 33, 33);
    color: aqua;
    font-family: arial;
    font-size: 16px;
    margin: 10px 35px 20px 35px;
}

.textdecor:is(h1) {
    font-weight: 700;
    margin: 40px 1px;
    /*  [top,right,bottom,left]
        [top,right,bottom the left will be equal to right]
        [topbottom,rightleft] */
    font-size: 36px;
}

.textdecor {
    font-family: segoe UI;
    text-decoration: none;
    list-style: none;
    padding: unset;
}

#navbar {
    margin-bottom: 50px;
}

#navbartext {
    font-size: 20px;
    font-weight: 600;
}

ul {
    display: flex;
    justify-content: space-evenly;
}

a {
    text-decoration: none;
    color: aliceblue;
}

.single-line {
    width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    /* [ellipsis,clip,string] */
}

/* border: width style(dotted-dashed-solid-double-groove-ridge) color */

input:focus {
    outline-color: #ff0000;
    background-color: #d13a3a;
    color: aqua;
}

label {
    font-size: 0.9rem;
    line-height: 180%;
}

/*
it does it for 1 input element:

document.querySelector("input").addEventListener("focus", function (e) {
    e.target.style.backgroundColor = "#d7c2c2"; // Set color on focus
});

document.querySelector("input").addEventListener("blur", function (e) {
    e.target.style.backgroundColor = "#d7c2c2"; // Reset color when losing focus
});

it does it for multiple input element:

document.querySelectorAll("input").forEach(input => {
    input.addEventListener("focus", function (e) {
        e.target.style.backgroundColor = "#d7c2c2";
    });

    input.addEventListener("blur", function (e) {
        e.target.style.backgroundColor = "#d7c2c2";
    });
});

*/

button {
    width: 100px;
    height: 25px;
}

button.test:hover {
    background-color: rgb(11, 90, 112);
    color: white;
    border: 1px solid rgb(0, 188, 239);
    border-radius: 2px;
    transition: ransform 0.7s ease, background-color 0.5s ease;
}

button.test:active {
    background-color: rgba(89, 204, 236, 0.5);
    color: white;
    border: 2px solid rgba(0, 188, 239, 0.5);
}

#pseudoP::first-letter {
    font-size: 5em;
    font-family: 'Courier New', Courier, monospace;
    color: orange;
}

#testtext::before {
    content: "►";
    color: orange;
    margin-right: 5px;
}

p::after {
    content: "";
    border-bottom: 2px dashed orange;
    display: block;
}

::marker {
    color: orange;
    font-size: 23px;
}

::selection {
    background-color: red;
    color: black;
}

.box1 {
    background-color: red;
    width: 200px;
    height: 100px;
    position: absolute;
    top: 650px;
    left: 50px;
    z-index: 1;
    /* Lower stacking order */
}

.box2 {
    background-color: blue;
    width: 200px;
    height: 100px;
    position: absolute;
    top: 680px;
    left: 70px;
    z-index: 2;
    /* Higher stacking order → Appears in front */
}

/* its a must for using z-score to define a "position" [relative, absolute, fixed, or sticky] */

.open-modal-btn {
    background-color: orange;
    color: black;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    height: auto;
    position: absolute;
    right: 30px;
    top: 40%;
}

.open-modal-btn:hover {
    background-color: #e6d19ac4;
}

.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
}

.modal-content {
    background-color: orange;
    margin: auto;
    padding: 20px;
    border: 1px solid #000000;
    width: 80%;
    max-width: 300px;
    border-radius: 10px;
    position: relative;
    box-shadow: 0 1px 4px rgba(252, 66, 66, 0.5);
}

.close-btn {
    color: #aaa;
    float: left;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
    border: 0;
    padding: 0;
    background-color: transparent;
    width: 30px;
    height: 30px;
    color: #000000;
    position: absolute;
    right: 15px;
    top: 15px;
    border-radius: 5px;
}

.close-btn:hover {
    background-color: #e6d19ac4;
}

.flight-class-form {
    margin: 20px 10px;
    color: #000000;
    accent-color: black;
}

input[type="radio"] {
    appearance: none;
    width: 20px;
    height: 20px;
    margin-right: 7px;
    top: 4px;
    border: 2px solid rgb(255, 0, 0);
    border-radius: 50%;
    background-color: white;
    display: inline-block;
    position: relative;
    cursor: pointer;
}

input[type="radio"]:checked {
    background-color: orange;
}

input[type="radio"]:checked::before {
    content: "";
    width: 10px;
    height: 10px;
    background-color: rgb(255, 0, 0);
    border-radius: 50%;
    position: absolute;
    top: 50%;
    /* This trick is widely used for centering elements dynamically! */
    left: 50%;
    transform: translate(-50%, -50%);
}

.search-btn {
    background-color: #f6bd38;
    color: black;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    position: relative;
    display: inline-block;
    width: 100%;
    height: 10%;
    box-shadow: 0 1px 4px black;
}

.search-btn:hover {
    background-color: #e6d19ac4;
}

/*
Combinator	            Selector	        Effect
Descendant ( )  	    div p	    Selects all <p> inside <div> (no matter how deep).
Adjacent Sibling (+)	h1 + p	    Selects only the first <p> immediately after <h1>.
General Sibling (~)	    h1 ~ p	    Selects all <p> elements after <h1>.
*/

.disabledbutton:hover {
    cursor: not-allowed;
}

.disabledbutton {
    color: rgb(62, 61, 61);
}

.background {
    width: 100vw;
    z-index: -1000;
    height: auto;
    position: fixed;
    top: 0px;
    left: 0px;
    margin: unset;
    padding: unset;
}

.centered {
    width: 200px;
    display: block;
    margin-left: auto;
    margin-right: auto;
    border: 1px solid rgb(255, 255, 255);
    border-radius: 6px;
}

.product-gallery {
    width: 80vw;
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 1px 8px rgb(151, 148, 148);
    background-color: #000000aa;
    display: block;
}

.main-image {
    max-width: 500px;
    border-bottom: 1px solid orange;
    margin-bottom: 20px;
    padding-bottom: 20px;
    margin-left: auto;
    margin-right: auto;
    display: flex;
    justify-content: center;
}

.main-image img {
    max-width: 480px;
}

.thumbnails {
    text-align: center;
}

.thumbnails img {
    margin-right: 10px;
    box-shadow: 0 0.8px 7px rgb(107, 107, 107);
    border-radius: 4px;
    border: 1px solid rgba(255, 255, 255, 0);
    transform: scale(1.1);
}

.thumbnails img:hover {
    border: 1px solid whitesmoke;
    cursor: pointer;
}

.container1 h1,
.container1 p {
    display: inline-block;
    height: 50px;
}

/* inline-block display is shown "inline" but like "block display" can have
width & height */

/* https://flexboxfroggy.com/
flex-direction & flex-wrap are so useful together that the method flex-flow
was created. example: flex-flow: row wrap */

.container2 {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-template-rows: auto;
    gap: 30% 10%;
    justify-items: center;
    align-items: center;
}

.container3 {
    display: grid;
    grid-template-columns: 30% 70%;
}

.filter {
    padding: 20px;
    border-radius: 8px;
    border: 1px solid #ccc;
}

.filter h3 {
    margin-bottom: 20px;
}

.checkboxes label {
    display: block;
    margin-bottom: 10px;
}

.checkboxes2 label {
    display: block;
    margin-bottom: 10px;
}

.products {
    display: flex;
    flex-wrap: nowrap;
    flex-direction: column;
    justify-content: start;
    align-items: stretch;
}

.products2 {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: auto;
    gap: 5px;
}

.product-card2 {
    padding: 10px;
    border-radius: 8px;
    border: 1px solid #eee;
    text-align: center;
}

.product-card {
    padding: 10px;
    border-radius: 8px;
    border: 1px solid #eee;
    text-align: center;
}

.product-card img {
    width: 100%;
    height: auto;
    margin-bottom: 5px;
}

.product-card h4 {
    font-size: 14px;
    margin-bottom: 5px;
    color: orange;
}

.product-card p {
    font-size: 18px;
    color: #ffffff;
    margin: 0;
}

/* When grid-column-start is used alone, the grid item by default will
span exactly one column. However, you can extend the item across
multiple columns by adding the grid-column-end property.

Instead of defining a grid item based on the start and end positions
of the grid lines, you can define it based on your desired column width
using the span keyword. Keep in mind that span only works with positive values.
For example, water these carrots with the rule grid-column-end: span 2

grid-column is a shorthand property that can accept both values at once, separated by a slash.

For example, grid-column: 2 / 4; will set the grid item to start on the 2nd
vertical grid line and end on the 4th grid line.
grid-column: 2 / span 3

grid-area accepts four values separated by slashes: grid-row-start, grid-column-start, grid-row-end, followed by grid-column-end.

One example of this would be grid-area: 1 / 1 / 3 / 6

For example, we previously defined five 20% columns with the rule
grid-template-columns: 20% 20% 20% 20% 20%;. This can be simplified as
grid-template-columns: repeat(5, 20%)

grid-template is a shorthand property that combines grid-template-rows and grid-template-columns.

For example, grid-template: 50% 50% / 200px; will create a grid with
two rows that are 50% each, and one column that is 200 pixels wide.*/



/* view & compare different width sizes:

https://developer.mozilla.org/en-US/docs/Web/CSS/length
*/




/* multi column container */

.multicolumn-container {
    background-color: #000000ae;
    padding: 50px;
    border-radius: 10px;
    column-count: 3;
    column-gap: 50px;
    column-rule: 1px dotted rgba(255, 166, 0, 0.356);
}

.multicolumn-container h2 {
    column-span: all;
}


/* @media [screen, print, speech]
Example for large screens: @media screen and (min-width: 700px), (orientation: landscape) { ... }
[,=Or and=AND only=ONLY not=NOT] */


/* outline is like border but outside the bborder & element:
it takes values just like border:
outline: 1px dotted red; */



/* box shadow:

[ <'offset-x'> || <'offset-y'> || <'blur-radius'> || ‌<'spread-radius'> || <'color'> ]
box-shadow: 2px 2px 0 5px rgba(0, 0, 0, 0.11);

<inset>
Changes the shadow from an outer box-shadow to an inner box-shadow
(as if the content is pressed into the box).

In this example, we include three shadows:
an inset shadow, a regular drop shadow, and a 2px shadow
that creates a border effect
(we could have used an outline instead for that third shadow).

  box-shadow:
    inset 0 -3em 3em rgb(0 200 0 / 30%),
    0 0 0 2px white,
    0.3em 0.3em 1em rgb(200 0 0 / 60%);
*/