@font-face {
    font-family: "IranSans";
    src:
        url("fonts/IranSans.woff2") format("woff2"),
        url("fonts/IranSans.woff") format("woff");
}

@font-face {
    font-family: "Vazir.ttf";
    src: url("../assets/Vazir.ttf"),
        url("../assets/Vazir.otf");
}

body {
    background-color: rgb(24, 33, 33);
    color: aqua;
    font-family: arial;
    font-size: 16px;
    margin: 10px 35px 20px 35px;
}

.textdecor:is(h1) {
    font-weight: 700;
    margin: 40px 1px;
    /*  [top,right,bottom,left]
        [top,right,bottom the left will be equal to right]
        [topbottom,rightleft] */
    font-size: 36px;
}

.textdecor {
    font-family: segoe UI;
    text-decoration: none;
    list-style: none;
    padding: unset;
}

#navbar {
    margin-bottom: 50px;
}

#navbartext {
    font-size: 20px;
    font-weight: 600;
}

ul {
    display: flex;
    justify-content: space-evenly;
}

a {
    text-decoration: none;
    color: aliceblue;
}

.single-line {
    width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    /* [ellipsis,clip,string] */
}

/* border: width style(dotted-dashed-solid-double-groove-ridge) color */

input:focus {
    outline-color: #ff0000;
    background-color: #d13a3a;
    color: aqua;
}

label {
    font-size: 0.9rem;
    line-height: 180%;
}

/*
it does it for 1 input element:

document.querySelector("input").addEventListener("focus", function (e) {
    e.target.style.backgroundColor = "#d7c2c2"; // Set color on focus
});

document.querySelector("input").addEventListener("blur", function (e) {
    e.target.style.backgroundColor = "#d7c2c2"; // Reset color when losing focus
});

it does it for multiple input element:

document.querySelectorAll("input").forEach(input => {
    input.addEventListener("focus", function (e) {
        e.target.style.backgroundColor = "#d7c2c2";
    });

    input.addEventListener("blur", function (e) {
        e.target.style.backgroundColor = "#d7c2c2";
    });
});

*/

button {
    width: 100px;
    height: 25px;
}

button.test:hover {
    background-color: rgb(11, 90, 112);
    color: white;
    border: 1px solid rgb(0, 188, 239);
    border-radius: 2px;
    transition: ransform 0.7s ease, background-color 0.5s ease;
}

button.test:active {
    background-color: rgba(89, 204, 236, 0.5);
    color: white;
    border: 2px solid rgba(0, 188, 239, 0.5);
}

#pseudoP::first-letter {
    font-size: 5em;
    font-family: 'Courier New', Courier, monospace;
    color: orange;
}

#testtext::before {
    content: "►";
    color: orange;
    margin-right: 5px;
}

p::after {
    content: "";
    border-bottom: 2px dashed orange;
    display: block;
}

::marker {
    color: orange;
    font-size: 23px;
}

::selection {
    background-color: red;
    color: black;
}

.box1 {
    background-color: red;
    width: 200px;
    height: 100px;
    position: absolute;
    top: 650px;
    left: 50px;
    z-index: 1;
    /* Lower stacking order */
}

.box2 {
    background-color: blue;
    width: 200px;
    height: 100px;
    position: absolute;
    top: 680px;
    left: 70px;
    z-index: 2;
    /* Higher stacking order → Appears in front */
}

/* its a must for using z-score to define a "position" [relative, absolute, fixed, or sticky] */

.open-modal-btn {
    background-color: orange;
    color: black;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    height: auto;
    position: absolute;
    right: 30px;
    top: 40%;
}

.open-modal-btn:hover {
    background-color: #e6d19ac4;
}

.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: auto;
    background-color: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
}

.modal-content {
    background-color: orange;
    margin: auto;
    padding: 20px;
    border: 1px solid #000000;
    width: 80%;
    max-width: 300px;
    border-radius: 10px;
    position: relative;
    box-shadow: 0 1px 4px rgba(252, 66, 66, 0.5);
}

.close-btn {
    color: #aaa;
    float: left;
    font-size: 28px;
    font-weight: bold;
    cursor: pointer;
    border: 0;
    padding: 0;
    background-color: transparent;
    width: 30px;
    height: 30px;
    color: #000000;
    position: absolute;
    right: 15px;
    top: 15px;
    border-radius: 5px;
}

.close-btn:hover {
    background-color: #e6d19ac4;
}

.flight-class-form {
    margin: 20px 10px;
    color: #000000;
    accent-color: black;
}

input[type="radio"] {
    appearance: none;
    width: 20px;
    height: 20px;
    margin-right: 7px;
    top: 4px;
    border: 2px solid rgb(255, 0, 0);
    border-radius: 50%;
    background-color: white;
    display: inline-block;
    position: relative;
    cursor: pointer;
}

input[type="radio"]:checked {
    background-color: orange;
}

input[type="radio"]:checked::before {
    content: "";
    width: 10px;
    height: 10px;
    background-color: rgb(255, 0, 0);
    border-radius: 50%;
    position: absolute;
    top: 50%;
    /* This trick is widely used for centering elements dynamically! */
    left: 50%;
    transform: translate(-50%, -50%);
}

.search-btn {
    background-color: #f6bd38;
    color: black;
    border: none;
    padding: 10px 20px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    position: relative;
    display: inline-block;
    width: 100%;
    height: 10%;
    box-shadow: 0 1px 4px black;
}

.search-btn:hover {
    background-color: #e6d19ac4;
}

/*
Combinator	            Selector	        Effect
Descendant ( )  	    div p	    Selects all <p> inside <div> (no matter how deep).
Adjacent Sibling (+)	h1 + p	    Selects only the first <p> immediately after <h1>.
General Sibling (~)	    h1 ~ p	    Selects all <p> elements after <h1>.
*/

.disabledbutton:hover {
    cursor: not-allowed;
}

.disabledbutton {
    color: rgb(62, 61, 61);
}